<?php

namespace Slim\Http {
    class Message implements \Psr\Http\Message\MessageInterface
    {
        /**
         * @var string
         */
        protected $protocolVersion;
        /**
         * @var array<string, bool>
         */
        protected static $validProtocolVersions;
        /**
         * @var \Slim\Interfaces\Http\HeadersInterface<string, mixed>
         */
        protected $headers;
        /**
         * @var \Psr\Http\Message\StreamInterface
         */
        protected $body;
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return void
         */
        public function __set($name, $value)
        {
        }
        /**
         * @return string
         */
        public function getProtocolVersion()
        {
        }
        /**
         * @param string $version
         *
         * @return static
         *
         * @throws \InvalidArgumentException
         */
        public function withProtocolVersion($version)
        {
        }
        /**
         * @return array<string, string[]>
         */
        public function getHeaders()
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function hasHeader($name)
        {
        }
        /**
         * @param string $name
         *
         * @return array<string>
         */
        public function getHeader($name)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function getHeaderLine($name)
        {
        }
        /**
         * @param string $name
         * @param array<string>|string $value
         *
         * @return static
         *
         * @throws \InvalidArgumentException
         */
        public function withHeader($name, $value)
        {
        }
        /**
         * @param string $name
         * @param array<string>|string $value
         *
         * @return static
         *
         * @throws \InvalidArgumentException
         */
        public function withAddedHeader($name, $value)
        {
        }
        /**
         * @param string $name
         *
         * @return static
         */
        public function withoutHeader($name)
        {
        }
        /**
         * @return \Psr\Http\Message\StreamInterface
         */
        public function getBody()
        {
        }
        /**
         * @param \Psr\Http\Message\StreamInterface $body
         *
         * @return static
         *
         * @throws \InvalidArgumentException
         */
        public function withBody(\Psr\Http\Message\StreamInterface $body)
        {
        }
    }
    class Response extends \Slim\Http\Message implements \Psr\Http\Message\ResponseInterface
    {
        public const EOL = <<<EOL
        EOL;
        /**
         * @var int
         */
        protected $status;
        /**
         * @var string
         */
        protected $reasonPhrase;
        /**
         * @var array<int, string>
         */
        protected static $messages;
        /**
         * @param int $status
         * @param \Slim\Interfaces\Http\HeadersInterface<string, mixed>|null $headers
         * @param \Psr\Http\Message\StreamInterface|null $body
         */
        public function __construct(
            $status = 200,
            ?\Slim\Interfaces\Http\HeadersInterface $headers = null,
            ?\Psr\Http\Message\StreamInterface $body = null
        ) {
        }
        public function __clone()
        {
        }
        /**
         * @return int
         */
        public function getStatusCode()
        {
        }
        /**
         * @param int $code
         * @param string $reasonPhrase
         *
         * @return static
         *
         * @throws \InvalidArgumentException
         */
        public function withStatus($code, $reasonPhrase = '')
        {
        }
        /**
         * @param int $status
         *
         * @return int
         *
         * @throws \InvalidArgumentException
         */
        protected function filterStatus($status)
        {
        }
        /**
         * @return string
         */
        public function getReasonPhrase()
        {
        }
        /**
         * @param string $name
         * @param array<string>|string $value
         *
         * @return static
         *
         * @throws \InvalidArgumentException
         */
        public function withHeader($name, $value)
        {
        }
        /**
         * @param string $data
         *
         * @return static
         */
        public function write($data)
        {
        }
        /**
         * @param \Psr\Http\Message\UriInterface|string $url
         * @param int|null $status
         *
         * @return static
         */
        public function withRedirect($url, $status = null)
        {
        }
        /**
         * @param mixed $data
         * @param int|null $status
         * @param int $encodingOptions
         *
         * @return static
         *
         * @throws \RuntimeException
         */
        public function withJson($data, $status = null, $encodingOptions = 0)
        {
        }
        /**
         * @return bool
         */
        public function isEmpty()
        {
        }
        /**
         * @return bool
         */
        public function isInformational()
        {
        }
        /**
         * @return bool
         */
        public function isOk()
        {
        }
        /**
         * @return bool
         */
        public function isSuccessful()
        {
        }
        /**
         * @return bool
         */
        public function isRedirect()
        {
        }
        /**
         * @return bool
         */
        public function isRedirection()
        {
        }
        /**
         * @return bool
         */
        public function isForbidden()
        {
        }
        /**
         * @return bool
         */
        public function isNotFound()
        {
        }
        /**
         * @return bool
         */
        public function isBadRequest()
        {
        }
        /**
         * @return bool
         */
        public function isClientError()
        {
        }
        /**
         * @return bool
         */
        public function isServerError()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Stream implements \Psr\Http\Message\StreamInterface
    {
        public const FSTAT_MODE_S_IFIFO = 4096;
        /**
         * @var array<string, string[]>
         */
        protected static $modes;
        /**
         * @var resource
         */
        protected $stream;
        /**
         * @var array<string, mixed>
         */
        protected $meta;
        /**
         * @var bool
         */
        protected $readable;
        /**
         * @var bool
         */
        protected $writable;
        /**
         * @var bool
         */
        protected $seekable;
        /**
         * @var int|null
         */
        protected $size;
        /**
         * @var bool
         */
        protected $isPipe;
        /**
         * @param resource $stream
         *
         * @throws \InvalidArgumentException
         */
        public function __construct($stream)
        {
        }
        /**
         * @param null|string $key
         *
         * @return array|mixed|null
         */
        public function getMetadata($key = null)
        {
        }
        /**
         * @return bool
         */
        protected function isAttached()
        {
        }
        /**
         * @param resource $newStream
         *
         * @return void
         *
         * @throws \InvalidArgumentException
         */
        protected function attach($newStream)
        {
        }
        /**
         * @return null|resource
         */
        public function detach()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        public function close()
        {
        }
        /**
         * @return int|null
         */
        public function getSize()
        {
        }
        /**
         * @return int
         *
         * @throws \RuntimeException
         */
        public function tell()
        {
        }
        /**
         * @return bool
         */
        public function eof()
        {
        }
        /**
         * @return bool
         */
        public function isReadable()
        {
        }
        /**
         * @return bool
         */
        public function isWritable()
        {
        }
        /**
         * @return bool
         */
        public function isSeekable()
        {
        }
        /**
         * @param int $offset
         * @param int $whence
         *
         * @return void
         *
         * @throws \RuntimeException
         */
        public function seek($offset, $whence = SEEK_SET)
        {
        }
        /**
         * @return void
         *
         * @throws \RuntimeException
         */
        public function rewind()
        {
        }
        /**
         * @param int $length
         *
         * @return string
         *
         * @throws \RuntimeException
         */
        public function read($length)
        {
        }
        /**
         * @param string $string
         *
         * @return int
         *
         * @throws \RuntimeException
         */
        public function write($string)
        {
        }
        /**
         * @return string
         *
         * @throws \RuntimeException
         */
        public function getContents()
        {
        }
        /**
         * @return bool
         */
        public function isPipe()
        {
        }
    }
}

namespace Slim\Interfaces {
    /**
     * @template TKey
     * @template TValue
     * @extends \IteratorAggregate<TKey, TValue>
     * @extends \ArrayAccess<TKey, TValue>
     */
    interface CollectionInterface extends \ArrayAccess, \Countable, \IteratorAggregate
    {
        /**
         * @param TKey $key
         * @param TValue $value
         *
         * @return void
         */
        public function set($key, $value);
        /**
         * @param TKey $key
         * @param mixed|null $default
         *
         * @return mixed
         */
        public function get($key, $default = null);
        /**
         * @param array<TKey, TValue> $items
         *
         * @return void
         */
        public function replace(array $items);
        /**
         * @return array<TKey, TValue>
         */
        public function all();
        /**
         * @param TKey $key
         *
         * @return bool
         */
        public function has($key);
        /**
         * @param TKey $key
         *
         * @return void
         */
        public function remove($key);
        /**
         * @return void
         */
        public function clear();
    }
}

namespace Slim\Interfaces\Http {
    /**
     * @template TKey of array-key
     * @template TValue
     * @extends \Slim\Interfaces\CollectionInterface<TKey, TValue>
     */
    interface HeadersInterface extends \Slim\Interfaces\CollectionInterface
    {
        /**
         * @param string $key
         * @param array<string>|string $value
         *
         * @return void
         */
        public function add($key, $value);
        /**
         * @param string $key
         *
         * @return string
         */
        public function normalizeKey($key);
    }
}
