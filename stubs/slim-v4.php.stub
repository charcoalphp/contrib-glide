<?php

namespace Slim\Psr7 {
    class Message implements \Psr\Http\Message\MessageInterface
    {
        /**
         * @var string
         */
        protected $protocolVersion;
        /**
         * @var array<string, bool>
         */
        protected static $validProtocolVersions;
        /**
         * @var Interfaces\HeadersInterface
         */
        protected $headers;
        /**
         * @var \Psr\Http\Message\StreamInterface
         */
        protected $body;
        /**
         * @param string $name
         * @param mixed $value
         *
         * @return void
         */
        public function __set($name, $value)
        {
        }
        public function getProtocolVersion() : string
        {
        }
        /**
         * @return static
         */
        public function withProtocolVersion($version)
        {
        }
        public function getHeaders() : array
        {
        }
        public function hasHeader($name) : bool
        {
        }
        public function getHeader($name) : array
        {
        }
        public function getHeaderLine($name) : string
        {
        }
        /**
         * @return static
         *
         * @throws \InvalidArgumentException
         */
        public function withHeader($name, $value)
        {
        }
        /**
         * @return static
         *
         * @throws \InvalidArgumentException
         */
        public function withAddedHeader($name, $value)
        {
        }
        /**
         * @return static
         */
        public function withoutHeader($name)
        {
        }
        public function getBody() : \Psr\Http\Message\StreamInterface
        {
        }
        /**
         * @return static
         *
         * @throws \InvalidArgumentException
         */
        public function withBody(\Psr\Http\Message\StreamInterface $body)
        {
        }
    }
    class Response extends \Slim\Psr7\Message implements \Psr\Http\Message\ResponseInterface
    {
        /**
         * @var int
         */
        protected $status;
        /**
         * @var string
         */
        protected $reasonPhrase;
        /**
         * @var array<int, string>
         */
        protected static $messages;
        /**
         * @param int $status
         * @param Interfaces\HeadersInterface|null $headers
         * @param \Psr\Http\Message\StreamInterface|null $body
         */
        public function __construct(int $status = 200, ?\Slim\Psr7\Interfaces\HeadersInterface $headers = null, ?\Psr\Http\Message\StreamInterface $body = null)
        {
        }
        public function __clone()
        {
        }
        public function getStatusCode() : int
        {
        }
        /**
         * @param int $code
         * @param string $reasonPhrase
         *
         * @return static
         *
         * @throws \InvalidArgumentException
         */
        public function withStatus($code, $reasonPhrase = '')
        {
        }
        public function getReasonPhrase() : string
        {
        }
        /**
         * @param int $status
         *
         * @return int
         *
         * @throws \InvalidArgumentException
         */
        protected function filterStatus($status) : int
        {
        }
        /**
         * @param mixed $reasonPhrase
         *
         * @return string
         *
         * @throws \InvalidArgumentException
         */
        protected function filterReasonPhrase($reasonPhrase = '') : string
        {
        }
    }
    class Stream implements \Psr\Http\Message\StreamInterface
    {
        public const FSTAT_MODE_S_IFIFO = 4096;
        /**
         * @var null|resource
         */
        protected $stream;
        /**
         * @var array<string, mixed>|null
         */
        protected $meta;
        /**
         * @var bool|null
         */
        protected $readable;
        /**
         * @var bool|null
         */
        protected $writable;
        /**
         * @var bool|null
         */
        protected $seekable;
        /**
         * @var int|null
         */
        protected $size;
        /**
         * @var bool|null
         */
        protected $isPipe;
        /**
         * @var bool
         */
        protected $finished;
        /**
         * @var \Psr\Http\Message\StreamInterface|null
         */
        protected $cache;
        /**
         * @param resource $stream
         * @param \Psr\Http\Message\StreamInterface|null $cache
         *
         * @throws \InvalidArgumentException
         */
        public function __construct($stream, ?\Psr\Http\Message\StreamInterface $cache = null)
        {
        }
        public function getMetadata($key = null)
        {
        }
        /**
         * @param resource $stream
         *
         * @return void
         *
         * @throws \InvalidArgumentException
         */
        protected function attach($stream)
        {
        }
        public function detach()
        {
        }
        public function __toString() : string
        {
        }
        public function close()
        {
        }
        public function getSize() : ?int
        {
        }
        /**
         * @throws \RuntimeException
         */
        public function tell() : int
        {
        }
        public function eof() : bool
        {
        }
        public function isReadable() : bool
        {
        }
        public function isWritable() : bool
        {
        }
        public function isSeekable() : bool
        {
        }
        /**
         * @throws \RuntimeException
         */
        public function seek($offset, $whence = SEEK_SET)
        {
        }
        /**
         * @throws \RuntimeException
         */
        public function rewind()
        {
        }
        /**
         * @throws \RuntimeException
         */
        public function read($length) : string
        {
        }
        /**
         * @throws \RuntimeException
         */
        public function write($string)
        {
        }
        /**
         * @throws \RuntimeException
         */
        public function getContents() : string
        {
        }
        /**
         * @return bool
         */
        public function isPipe() : bool
        {
        }
    }
}
namespace Slim\Psr7\Interfaces {
    interface HeadersInterface
    {
        /**
         * @param string $name
         * @param string[]|string $value
         *
         * @return HeadersInterface
         *
         * @throws \InvalidArgumentException
         */
        public function addHeader($name, $value) : \Slim\Psr7\Interfaces\HeadersInterface;
        /**
         * @param string $name
         *
         * @return HeadersInterface
         */
        public function removeHeader(string $name) : \Slim\Psr7\Interfaces\HeadersInterface;
        /**
         * @param string $name
         * @param array<string> $default
         *
         * @return string[]
         */
        public function getHeader(string $name, $default = array()) : array;
        /**
         * @param string $name
         * @param string[]|string $value
         *
         * @return HeadersInterface
         *
         * @throws \InvalidArgumentException
         */
        public function setHeader($name, $value) : \Slim\Psr7\Interfaces\HeadersInterface;
        /**
         * @param array<string, string[]> $headers
         *
         * @return HeadersInterface
         *
         * @throws \InvalidArgumentException
         */
        public function setHeaders(array $headers) : \Slim\Psr7\Interfaces\HeadersInterface;
        /**
         * @param string $name
         *
         * @return bool
         */
        public function hasHeader(string $name) : bool;
        /**
         * @param bool $originalCase
         *
         * @return array<string, string[]>
         */
        public function getHeaders(bool $originalCase) : array;
    }
}
