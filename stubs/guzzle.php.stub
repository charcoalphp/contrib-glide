<?php

namespace GuzzleHttp\Psr7 {
    class Message
    {
        /**
         * @param \Psr\Http\Message\MessageInterface $message
         */
        public static function toString(\Psr\Http\Message\MessageInterface $message) : string
        {
        }
        /**
         * @param \Psr\Http\Message\MessageInterface $message
         * @param int $truncateAt
         */
        public static function bodySummary(\Psr\Http\Message\MessageInterface $message, int $truncateAt = 120) : ?string
        {
        }
        /**
         * @param \Psr\Http\Message\MessageInterface $message
         *
         * @throws \RuntimeException
         */
        public static function rewindBody(\Psr\Http\Message\MessageInterface $message)
        {
        }
        /**
         * @param string $message
         */
        public static function parseMessage(string $message) : array
        {
        }
        /**
         * @param string $path
         * @param array $headers
         */
        public static function parseRequestUri(string $path, array $headers) : string
        {
        }
        /**
         * @param string $message
         */
        public static function parseRequest(string $message) : \Psr\Http\Message\RequestInterface
        {
        }
        /**
         * @param string $message
         */
        public static function parseResponse(string $message) : \Psr\Http\Message\ResponseInterface
        {
        }
    }
    class Response implements \Psr\Http\Message\ResponseInterface
    {
        private const PHRASES = array(100 => 'Continue', 101 => 'Switching Protocols', 102 => 'Processing', 200 => 'OK', 201 => 'Created', 202 => 'Accepted', 203 => 'Non-Authoritative Information', 204 => 'No Content', 205 => 'Reset Content', 206 => 'Partial Content', 207 => 'Multi-status', 208 => 'Already Reported', 300 => 'Multiple Choices', 301 => 'Moved Permanently', 302 => 'Found', 303 => 'See Other', 304 => 'Not Modified', 305 => 'Use Proxy', 306 => 'Switch Proxy', 307 => 'Temporary Redirect', 308 => 'Permanent Redirect', 400 => 'Bad Request', 401 => 'Unauthorized', 402 => 'Payment Required', 403 => 'Forbidden', 404 => 'Not Found', 405 => 'Method Not Allowed', 406 => 'Not Acceptable', 407 => 'Proxy Authentication Required', 408 => 'Request Time-out', 409 => 'Conflict', 410 => 'Gone', 411 => 'Length Required', 412 => 'Precondition Failed', 413 => 'Request Entity Too Large', 414 => 'Request-URI Too Large', 415 => 'Unsupported Media Type', 416 => 'Requested range not satisfiable', 417 => 'Expectation Failed', 418 => 'I\'m a teapot', 422 => 'Unprocessable Entity', 423 => 'Locked', 424 => 'Failed Dependency', 425 => 'Unordered Collection', 426 => 'Upgrade Required', 428 => 'Precondition Required', 429 => 'Too Many Requests', 431 => 'Request Header Fields Too Large', 451 => 'Unavailable For Legal Reasons', 500 => 'Internal Server Error', 501 => 'Not Implemented', 502 => 'Bad Gateway', 503 => 'Service Unavailable', 504 => 'Gateway Time-out', 505 => 'HTTP Version not supported', 506 => 'Variant Also Negotiates', 507 => 'Insufficient Storage', 508 => 'Loop Detected', 510 => 'Not Extended', 511 => 'Network Authentication Required');
        /**
         * @var string
         */
        private $reasonPhrase;
        /**
         * @var int
         */
        private $statusCode;
        /**
         * @param int $status
         * @param array<string, array<string>|string> $headers
         * @param \Psr\Http\Message\StreamInterface|null|resource|string $body
         * @param string $version
         * @param null|string $reason
         */
        public function __construct(int $status = 200, array $headers = array(), $body = null, string $version = '1.1', ?string $reason = null)
        {
        }
        public function getStatusCode() : int
        {
        }
        public function getReasonPhrase() : string
        {
        }
        /**
         * @throws \InvalidArgumentException
         */
        public function withStatus($code, $reasonPhrase = '') : \Psr\Http\Message\ResponseInterface
        {
        }
        /**
         * @param mixed $statusCode
         */
        public function assertStatusCodeIsInteger($statusCode)
        {
        }
        public function assertStatusCodeRange(int $statusCode)
        {
        }
    }
    class Stream implements \Psr\Http\Message\StreamInterface
    {
        private const READABLE_MODES = '/r|a\\+|ab\\+|w\\+|wb\\+|x\\+|xb\\+|c\\+|cb\\+/';
        private const WRITABLE_MODES = '/a|w|r\\+|rb\\+|rw|x|c/';
        /**
         * @var resource
         */
        private $stream;
        /**
         * @var int|null
         */
        private $size;
        /**
         * @var bool
         */
        private $seekable;
        /**
         * @var bool
         */
        private $readable;
        /**
         * @var bool
         */
        private $writable;
        /**
         * @var null|string
         */
        private $uri;
        /**
         * @var array<string, mixed>
         */
        private $customMetadata;
        /**
         * @param resource $stream
         * @param array{size?: int, metadata?: array} $options
         *
         * @throws \InvalidArgumentException
         */
        public function __construct($stream, array $options = array())
        {
        }
        public function __destruct()
        {
        }
        public function __toString() : string
        {
        }
        /**
         * @throws \RuntimeException
         */
        public function getContents() : string
        {
        }
        public function close()
        {
        }
        public function detach()
        {
        }
        public function getSize() : ?int
        {
        }
        public function isReadable() : bool
        {
        }
        public function isWritable() : bool
        {
        }
        public function isSeekable() : bool
        {
        }
        public function eof() : bool
        {
        }
        /**
         * @throws \RuntimeException
         */
        public function tell() : int
        {
        }
        /**
         * @throws \RuntimeException
         */
        public function rewind()
        {
        }
        /**
         * @throws \RuntimeException
         */
        public function seek($offset, $whence)
        {
        }
        /**
         * @throws \RuntimeException
         */
        public function read($length) : string
        {
        }
        /**
         * @throws \RuntimeException
         */
        public function write($string) : int
        {
        }
        /**
         * @return mixed
         */
        public function getMetadata($key = null)
        {
        }
    }
}
